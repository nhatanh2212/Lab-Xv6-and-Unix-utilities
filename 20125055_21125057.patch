diff --git a/Makefile b/Makefile
index 39a99d7..05d651c 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_find\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_xargs\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/user/find.c b/user/find.c
index e69de29..6f8b3ea 100644
--- a/user/find.c
+++ b/user/find.c
@@ -0,0 +1,68 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+void find(char *dir_path, char *target_file) {
+    char buf[512], *p;
+    int fd;
+    struct dirent de;
+    struct stat st;
+
+    if ((fd = open(dir_path, O_RDONLY)) < 0) {
+        fprintf(2, "find: cannot find path %s\n", dir_path);
+        return;
+    }
+
+    if (fstat(fd, &st) < 0) {
+        fprintf(2, "find: cannot stat %s\n", dir_path);
+        close(fd);
+        return;
+    }
+
+    if (st.type != T_DIR) {
+        fprintf(2, "find: %s is not a directory\n", dir_path);
+        close(fd);
+        return;
+    }
+
+    if (strlen(dir_path) + 1 + DIRSIZ + 1 > sizeof buf){
+        fprintf(2, "find: path too long\n");
+        close(fd);
+        return;
+    }
+
+    strcpy(buf, dir_path);
+    p = buf + strlen(buf);
+    *p++ = '/';
+    while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+        if (de.inum == 0 || !strcmp(de.name, ".") || !strcmp(de.name, ".."))
+            continue;
+        memmove(p, de.name, DIRSIZ);
+        p[DIRSIZ] = 0;
+        if (stat(buf, &st) < 0) {
+            fprintf(1, "find: cannot stat %s\n", buf);
+            continue;
+        }
+        if (st.type == T_FILE && !strcmp(de.name, target_file)) {
+            fprintf(1, "%s\n", buf);
+        } else if (st.type == T_DIR) {
+            find(buf, target_file);
+        }
+    }
+    close(fd);
+}
+
+int main(int argc, char *argv[]) {
+    if (argc < 2 || argc > 3) {
+        fprintf(2, "Usage: find (path) [file]\n");
+        exit(1);
+    } else if (argc < 3) {
+        find(".", argv[1]);
+    } else {
+        find(argv[1], argv[2]);
+    }
+
+    exit(0);
+}
diff --git a/user/pingpong.c b/user/pingpong.c
index e69de29..61b901e 100644
--- a/user/pingpong.c
+++ b/user/pingpong.c
@@ -0,0 +1,45 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    int p1[2], p2[2];
+    char buf;
+    int pid;
+
+    pipe(p1);
+    pipe(p2);
+
+
+    if ((pid = fork()) == 0) {
+        close(p1[1]);  
+        close(p2[0]); 
+
+
+        read(p1[0], &buf, 1);
+        printf("%d: received ping\n", getpid());
+
+        write(p2[1], &buf, 1);
+
+        close(p1[0]);
+        close(p2[1]);
+        exit(0);
+    } else {
+
+        close(p1[0]);  
+        close(p2[1]);  
+
+        write(p1[1], "a", 1);
+
+        read(p2[0], &buf, 1);
+        printf("%d: received pong\n", getpid());
+
+        close(p1[1]);
+        close(p2[0]);
+        wait(0);
+        exit(0);
+    }
+
+    exit(0);
+}
diff --git a/user/prime.c b/user/prime.c
index e69de29..abb8806 100644
--- a/user/prime.c
+++ b/user/prime.c
@@ -0,0 +1,53 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+#define READ_END 0
+#define WRITE_END 1
+
+void child_process(int read_fd, int prime) {
+    int pipe_fds[2];
+    pipe(pipe_fds);
+
+    int pid = fork();
+    if (pid == 0) {
+        close(pipe_fds[READ_END]);
+        while (1) {
+            int num;
+            if (read(read_fd, &num, sizeof(int)) == 0) {
+                exit(0);
+            }
+            if (num % prime != 0) {
+                write(pipe_fds[WRITE_END], &num, sizeof(int));
+            }
+        }
+    } else {
+        close(read_fd);
+        close(pipe_fds[WRITE_END]);
+        child_process(pipe_fds[0], prime);
+    }
+}
+
+int main() {
+    int pipe_fds[2];
+    pipe(pipe_fds);
+
+    int pid = fork();
+    if (pid == 0) {
+        close(pipe_fds[READ_END]);
+        for (int i = 2; i <= 35; i++) {
+            write(pipe_fds[WRITE_END], &i, sizeof(int));
+        }
+        close(pipe_fds[WRITE_END]);
+        exit(0);
+    } else {
+        close(pipe_fds[WRITE_END]);
+        int prime;
+        if (read(pipe_fds[READ_END], &prime, sizeof(int)) != 0) {
+            printf("prime %d\n", prime);
+            child_process(pipe_fds[READ_END], prime);
+        }
+        close(pipe_fds[READ_END]);
+        wait(0);
+    }
+    exit(0);
+}
diff --git a/user/primes.c b/user/primes.c
index e69de29..47fa38e 100644
--- a/user/primes.c
+++ b/user/primes.c
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int min = 2; 
+int
+main(int argc, char *argv[])
+{
+    int _pipe[2][2];
+    pipe(_pipe[0]);
+    int index = 0;
+    int num;
+    for(int i = min;i < 35;++i){
+        write(_pipe[index][1],&i,4);
+    }
+    close(_pipe[0][1]);
+    while(fork()==0){
+        if(read(_pipe[index][0],&min,4)!=0){
+            printf("prime %d\n",min);
+        }else{
+            exit(0);
+        }
+        pipe(_pipe[index^1]);
+        while(read(_pipe[index][0],&num,4)!=0){
+            if(num%min){
+                write(_pipe[index^1][1],&num,4);
+            }
+        }
+        close(_pipe[index^1][1]);
+        index = index^1;
+    }
+    close(_pipe[index][0]);
+    wait(0);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
index e69de29..47eb237 100644
--- a/user/sleep.c
+++ b/user/sleep.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    if (argc != 2) {
+        fprintf(2, "Usage: sleep <ticks>\n");
+        exit(1);
+    }
+
+    int ticks = atoi(argv[1]);
+
+    if (ticks <= 0) {
+        fprintf(2, "Invalid argument: Please provide a positive number of ticks\n");
+        exit(1);
+    }
+
+    sleep(ticks);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/xargs.c b/user/xargs.c
index e69de29..bd02c7c 100644
--- a/user/xargs.c
+++ b/user/xargs.c
@@ -0,0 +1,49 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/param.h"
+
+void process_line(char *cmd, char *args[], int argc) {
+    args[argc] = malloc(128);
+
+    char buf;
+    int i = 0;
+    while (read(0, &buf, 1)) {
+        if (buf == '\n') {
+            args[argc][i] = '\0';
+            if (fork() == 0) {
+                exec(cmd, args);
+            } else {
+                i = 0;
+                wait(0);
+            }
+        } else {
+            args[argc][i++] = buf;
+        }
+    }
+}
+
+int main(int argc, char *argv[]) {
+    int index = 0;
+    int arg_count = 1;
+    char *args[MAXARG];
+    
+    if (strcmp(argv[1], "-n") == 0) {
+        index = 3;
+    } else {
+        index = 1;
+    }
+    
+    args[0] = malloc(strlen(argv[index]) + 1);
+    strcpy(args[0], argv[index]);
+    
+    for (int i = index + 1; i < argc; ++i) {
+        args[arg_count] = malloc(strlen(argv[i]) + 1);
+        strcpy(args[arg_count++], argv[i]);
+    }
+    
+    process_line(argv[index], args, arg_count);
+
+    exit(0);
+}
